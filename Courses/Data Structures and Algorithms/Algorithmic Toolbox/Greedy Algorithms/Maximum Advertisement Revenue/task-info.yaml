type: edu
files:
- name: logo.png
  visible: false
  text: 
  learner_created: false
- name: maximum_ad_revenue.py
  visible: true
  placeholders:
  - offset: 846
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 846
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3

    from itertools import permutations


    def max_dot_product_naive(first_sequence, second_sequence):
        assert len(first_sequence) == len(second_sequence)
        assert len(first_sequence) <= 10 ** 3
        assert all(0 <= f <= 10 ** 5 for f in first_sequence)
        assert all(0 <= s <= 10 ** 5 for s in second_sequence)

        max_product = 0
        for permutation in permutations(second_sequence):
            dot_product = sum(first_sequence[i] * permutation[i] for i in range(len(first_sequence)))
            max_product = max(max_product, dot_product)

        return max_product


    def max_dot_product(first_sequence, second_sequence):
        assert len(first_sequence) == len(second_sequence)
        assert len(first_sequence) <= 10 ** 3
        assert all(0 <= f <= 10 ** 5 for f in first_sequence)
        assert all(0 <= s <= 10 ** 5 for s in second_sequence)

        type here


    if __name__ == '__main__':
        n = int(input())
        prices = list(map(int, input().split()))
        clicks = list(map(int, input().split()))
        assert len(prices) == len(clicks) == n
        print(max_dot_product(prices, clicks))
  learner_created: false
- name: maximum_ad_revenue_unit_tests.py
  visible: true
  placeholders:
  - offset: 443
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 443
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  - offset: 838
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 838
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from maximum_ad_revenue import max_dot_product, max_dot_product_naive


    class TestMaxDotProduct(unittest.TestCase):
        def test_small(self):
            for (first_sequence, second_sequence) in [
                ([1], [2]),
                ([2], [1]),
                ([1], [1]),
                ([1, 2], [5, 10]),
                ([2, 1], [5, 10]),
                ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]),
                ([17, 12, 20], [19, 2, 3]),
                type here
            ]:
                self.assertEqual(
                    max_dot_product(list(first_sequence), list(second_sequence)),
                    max_dot_product_naive(first_sequence, second_sequence)
                )

        def test_large(self):
            n = 10 ** 3
            self.assertEqual(max_dot_product([0] * n, [0] * n), 0)
            self.assertEqual(max_dot_product([1] * n, [1] * n), n)
            type here



    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from random import randint
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from maximum_ad_revenue import max_dot_product


    def reference(a, b):
        a = sorted(a)
        b = sorted(b)
        return sum(a[i] * b[i] for i in range(len(a)))


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("maximum_ad_revenue_unit_tests.py")

        all_tests_passed = True

        for n in [10, 20, 30]:
            a = [randint(0, 10 ** 5) for _ in range(n)]
            b = [randint(0, 10 ** 5) for _ in range(n)]

            if reference(a, b) != max_dot_product(a, b):
                all_tests_passed = False
                failed("Wrong answer for a={}, b={}".format(a, b))

        if all_tests_passed:
            passed()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions
status: Unchecked
record: -1
