type: edu
files:
- name: logo.png
  visible: false
  text: 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
  learner_created: false
- name: money_change.py
  visible: true
  placeholders:
  - offset: 74
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 74
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3


    def money_change(money):
        assert 0 <= money <= 10 ** 3
        type here


    if __name__ == '__main__':
        input_money = int(input())
        print(money_change(input_money))
  learner_created: false
- name: money_change_unit_tests.py
  visible: true
  placeholders:
  - offset: 187
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 187
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from money_change import money_change


    class TestSumOfTwoDigits(unittest.TestCase):
        def test(self):
            for (money, number_of_coins) in [(1, 1), (2, 2), (28, 6), type here]:
                self.assertEqual(money_change(money), number_of_coins)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from money_change import money_change


    def reference(money):
        assert 0 <= money <= 10 ** 3
        return (money // 10) + ((money % 10) // 5) + (money % 5)


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("money_change_unit_tests.py")

        all_tests_passed = True
        for m in range(10 ** 3):
            if money_change(m) != reference(m):
                all_tests_passed = False
                failed("Wrong answer for money={}".format(m))
                break

        if all_tests_passed:
            passed()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions
status: Unchecked
record: -1
