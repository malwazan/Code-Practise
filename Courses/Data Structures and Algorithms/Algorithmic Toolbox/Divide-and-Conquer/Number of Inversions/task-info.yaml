type: edu
files:
- name: logo.png
  visible: false
  text: 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
  learner_created: false
- name: number_of_inversions.py
  visible: true
  placeholders:
  - offset: 285
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 285
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3

    from itertools import combinations


    def compute_inversions_naive(a):
        number_of_inversions = 0
        for i, j in combinations(range(len(a)), 2):
            if a[i] > a[j]:
                number_of_inversions += 1
        return number_of_inversions


    def compute_inversions(a):
        type here


    if __name__ == '__main__':
        input_n = int(input())
        elements = list(map(int, input().split()))
        assert len(elements) == input_n
        print(compute_inversions(elements))
  learner_created: false
- name: number_of_inversions_unit_tests.py
  visible: true
  placeholders:
  - offset: 283
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 283
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  - offset: 814
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 814
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from number_of_inversions import compute_inversions, compute_inversions_naive
    from random import randint


    class TestNumberOfInversions(unittest.TestCase):
        def test_small(self):
            for array in [
                ([1, 2, 3]),
                ([3, 2, 1]),
                type here
            ]:
                self.assertEqual(compute_inversions(array),
                                 compute_inversions_naive(array))

        def test_random(self):
            for n in (10, 100):
                for max_value in (1, 2, 10, 10 ** 5):
                    array = [randint(0, max_value) for _ in range(n)]
                    self.assertEqual(compute_inversions(array),
                                     compute_inversions_naive(array))

        def test_large(self):
            self.assertEqual(compute_inversions([1] * 100), 0)
            type here

    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from number_of_inversions import compute_inversions, compute_inversions_naive
    from random import randint


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("number_of_inversions_unit_tests.py")

        all_tests_passed = True
        for n in (3, 4, 5, 10, 100):
            for array in (
                [1] * n,
                [n - i for i in range(n)],
                [i for i in range(n)],
                [randint(0, n) for _ in range(n)]
            ):
                if compute_inversions(array) != compute_inversions_naive(array):
                    all_tests_passed = False
                    failed("Wrong answer for array={}".format(array))
                    break

        if all_tests_passed:
            passed()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/w9YDz/programming-assignment-3-divide-and-conquer/discussions
status: Unchecked
record: -1
