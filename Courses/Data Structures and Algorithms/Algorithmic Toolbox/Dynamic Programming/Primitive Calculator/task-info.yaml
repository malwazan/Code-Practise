type: edu
files:
- name: logo.png
  visible: false
  text: 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
  learner_created: false
- name: primitive_calculator.py
  visible: true
  placeholders:
  - offset: 72
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 72
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3


    def compute_operations(n):
        assert 1 <= n <= 10 ** 6
        type here


    if __name__ == '__main__':
        input_n = int(input())
        output_sequence = compute_operations(input_n)
        print(len(output_sequence) - 1)
        print(" ".join(map(str, output_sequence)))
  learner_created: false
- name: primitive_calculator_unit_tests.py
  visible: true
  placeholders:
  - offset: 186
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 186
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from primitive_calculator import compute_operations


    class PrimitiveCalculator(unittest.TestCase):
        def test(self):
            for n, answer in ((2, 1), (3, 1), (5, 3), type here):
                sequence = compute_operations(n)
                self.assertEqual(answer, len(sequence) - 1)
                self.assertEqual(sequence[0], 1)
                self.assertEqual(sequence[-1], n)
                for i in range(len(sequence) - 1):
                    if sequence[i + 1] != sequence[i] + 1 and sequence[i + 1] != 2 * sequence[i]:
                        self.assertEqual(sequence[i + 1], 3 * sequence[i])


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from primitive_calculator import compute_operations


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("primitive_calculator_unit_tests.py")

        all_tests_passed = True

        for n, answer in ((20, 4), (200, 8), (239, 10), (69006, 19)):
            sequence = compute_operations(n)
            if len(sequence) - 1 != answer:
                all_tests_passed = False
                failed("Wrong answer for n={}".format(n))
                break

        if all_tests_passed:
            passed()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions
status: Unchecked
record: -1
