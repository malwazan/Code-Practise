type: edu
files:
- name: logo.png
  visible: false
  text: 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
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from maximum_gold import maximum_gold


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("maximum_gold_unit_tests.py")

        all_tests_passed = True

        for capacity, weights, answer in (
                (10, (1, 4, 8), 9),
                (20, (5, 7, 12, 18), 19),
                (10, (3, 5, 3, 3, 5), 10),
                (10, (3, 5, 3, 3, 5), 10),
                (500, (342, 381, 230, 381, 206, 393, 364, 319, 279, 385, 345, 263, 365, 281, 298, 247, 239, 201, 378, 351), 499)
        ):
            if maximum_gold(capacity, weights) != answer:
                all_tests_passed = False
                failed("Wrong answer for capacity={}, weights={}".format(capacity, weights))
                break

        if all_tests_passed:
            passed()
  learner_created: false
- name: maximum_gold.py
  visible: true
  placeholders:
  - offset: 204
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 204
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3

    from sys import stdin


    def maximum_gold(capacity, weights):
        assert 1 <= capacity <= 10 ** 4
        assert 1 <= len(weights) <= 10 ** 3
        assert all(1 <= w <= 10 ** 5 for w in weights)

        type here


    if __name__ == '__main__':
        input_capacity, n, *input_weights = list(map(int, stdin.read().split()))
        assert len(input_weights) == n

        print(maximum_gold(input_capacity, input_weights))
  learner_created: false
- name: maximum_gold_unit_tests.py
  visible: true
  placeholders:
  - offset: 278
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 278
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from maximum_gold import maximum_gold


    class MaximumGold(unittest.TestCase):
        def test(self):
            for capacity, weights, answer in (
                (10, (1, 4, 8), 9),
                (20, (5, 7, 12, 18), 19),
                (10, (3, 5, 3, 3, 5), 10),
                type here
            ):
                self.assertEqual(maximum_gold(capacity, weights), answer)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions
status: Unchecked
record: -1
