type: edu
files:
- name: logo.png
  visible: false
  text: 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
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from arithmetic_expression import find_maximum_value


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("arithmetic_expression_unit_tests.py")

        all_tests_passed = True

        for s, answer in (
            ("5", 5),
            ("2+3", 5),
            ("2-3", -1),
            ("5-8+7*4-8+9", 200),
            ("2-3", -1),
            ("9*9*9*9", 9 * 9 * 9 * 9),
            ("1-1", 0),
            ("7", 7),
            ("1+2+3+4+5+6+7+8+9", 45),
        ):
            if find_maximum_value(s) != answer:
                all_tests_passed = False
                failed("Wrong answer for {}".format(s))
                break

        if all_tests_passed:
            passed()
  learner_created: false
- name: arithmetic_expression.py
  visible: true
  placeholders:
  - offset: 85
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 85
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3


    def find_maximum_value(dataset):
        assert 1 <= len(dataset) <= 29

        type here


    if __name__ == "__main__":
        print(find_maximum_value(input()))
  learner_created: false
- name: arithmetic_expression_unit_tests.py
  visible: true
  placeholders:
  - offset: 282
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 282
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from arithmetic_expression import find_maximum_value


    class ArithmeticExpression(unittest.TestCase):
        def test(self):
            for s, answer in (
                ("5", 5),
                ("2+3", 5),
                ("2-3", -1),
                ("5-8+7*4-8+9", 200),
                type here
            ):
                self.assertEqual(find_maximum_value(s), answer)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions
status: Unchecked
record: -1
