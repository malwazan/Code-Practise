type: edu
files:
- name: logo.png
  visible: false
  text: 
  learner_created: false
- name: maximum_pairwise_product.py
  visible: true
  placeholders:
  - offset: 652
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 439
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    # python3


    def max_pairwise_product_naive(numbers):
        assert len(numbers) >= 2
        assert all(0 <= x <= 2 * 10 ** 5 for x in numbers)

        product = 0

        for i in range(len(numbers)):
            for j in range(i + 1, len(numbers)):
                product = max(product, numbers[i] * numbers[j])

        return product


    def max_pairwise_product(numbers):
        assert len(numbers) >= 2
        assert all(0 <= x <= 2 * 10 ** 5 for x in numbers)
        type here


    if __name__ == '__main__':
        n = int(input())
        input_numbers = list(map(int, input().split()))
        assert len(input_numbers) == n
        print(max_pairwise_product(input_numbers))
  learner_created: false
- name: maximum_pairwise_product_unit_tests.py
  visible: true
  placeholders:
  - offset: 401
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 401
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from random import randint
    from maximum_pairwise_product import max_pairwise_product_naive, max_pairwise_product

    class TestMaxPairwiseProduct(unittest.TestCase):
        def test_small(self):
            self.assertEqual(max_pairwise_product([1, 2, 3]), 6)
            self.assertEqual(max_pairwise_product([9, 3, 2]), 27)
            self.assertEqual(max_pairwise_product([7, 3, 7, 2]), 49)
            type here


        def test_stress(self):
            number_of_iterations = 10
            array_size = 100
            max_number = 2 * 10**5

            for _ in range(number_of_iterations):
                numbers = [randint(0, max_number) for _ in range(array_size)]
                self.assertEqual(max_pairwise_product(list(numbers)), max_pairwise_product_naive(numbers))


        def test_large(self):
            self.assertEqual(max_pairwise_product([4] * (2 * 10**5)), 16)
            self.assertEqual(max_pairwise_product([x for x in range(10**5)]), (10**5 - 1) * (10**5 - 2))
            self.assertEqual(max_pairwise_product([1] * (2 * 10**5)), 1)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from maximum_pairwise_product import max_pairwise_product

    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("maximum_pairwise_product_unit_tests.py")

        all_tests_passed = True
        tests = [
            ([1, 2], 2),
            ([2, 1], 2),
            ([3, 5], 15),
            ([5, 3], 15),
            ([7, 7], 49),
            ([5, 1, 5], 25),
            ([1, 5, 5], 25),
            ([i + 1 for i in range(10**5)], (10**5 - 1) * (10 ** 5)),
        ]

        for array, answer in tests:
            if max_pairwise_product(array) != answer:
                all_tests_passed = False
                failed("Wrong answer for A={}".format(array))
                break

        if all_tests_passed:
            passed()
  learner_created: false
- name: max_pairwise_product.py
  visible: true
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/d5xfz/maximum-pairwise-product/discussions
status: Unchecked
record: -1
