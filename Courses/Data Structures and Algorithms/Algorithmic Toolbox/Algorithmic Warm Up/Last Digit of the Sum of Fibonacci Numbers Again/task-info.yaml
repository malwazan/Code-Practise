type: edu
files:
- name: last_digit_of_the_sum_of_fibonacci_numbers_again.py
  visible: true
  placeholders:
  - offset: 602
    length: 209
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 608
    initialized_from_dependency: false
    selected: true
    status: Unchecked
  text: |
    # python3


    def last_digit_of_the_sum_of_fibonacci_numbers_again_naive(from_index, to_index):
        assert 0 <= from_index <= to_index <= 10 ** 18

        if to_index == 0:
            return 0

        fibonacci_numbers = [0] * (to_index + 1)
        fibonacci_numbers[0] = 0
        fibonacci_numbers[1] = 1
        for i in range(2, to_index + 1):
            fibonacci_numbers[i] = fibonacci_numbers[i - 2] + fibonacci_numbers[i - 1]

        return sum(fibonacci_numbers[from_index:to_index + 1]) % 10


    def last_digit_of_the_sum_of_fibonacci_numbers_again(from_index, to_index):
        assert 0 <= from_index <= to_index <= 10 ** 18

        type here


    if __name__ == '__main__':
        input_from, input_to = map(int, input().split())
        print(last_digit_of_the_sum_of_fibonacci_numbers_again(input_from, input_to))
  learner_created: false
- name: last_digit_of_the_sum_of_fibonacci_numbers_again_unit_tests.py
  visible: true
  placeholders:
  - offset: 904
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 904
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from itertools import combinations
    from last_digit_of_the_sum_of_fibonacci_numbers_again import last_digit_of_the_sum_of_fibonacci_numbers_again, \
        last_digit_of_the_sum_of_fibonacci_numbers_again_naive


    class TestLastDigitOfTheSumOfFibonacciNumbersAgain(unittest.TestCase):
        def test_small(self):
            for from_index, to_index in combinations(range(2, 15), 2):
                self.assertEqual(last_digit_of_the_sum_of_fibonacci_numbers_again(from_index, to_index),
                                 last_digit_of_the_sum_of_fibonacci_numbers_again_naive(from_index, to_index))

        def test_large(self):
            for (from_index, to_index, last_digit) in [(3, 7, 1), (10, 10, 5), (100, 200, 0),
                                                       (17, 1700, 7),
                                                       (19, 10000000000, 1),
                                                       type here]:
                self.assertEqual(last_digit_of_the_sum_of_fibonacci_numbers_again(from_index, to_index), last_digit)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: logo.png
  visible: false
  text: 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
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from last_digit_of_the_sum_of_fibonacci_numbers_again import last_digit_of_the_sum_of_fibonacci_numbers_again


    def fibonacci_sum_last_digit(n):
        n = n % 60

        prev, cur = 0, 1
        for _ in range(n):
            prev, cur = cur, (prev + cur) % 10

        return (prev + 9) % 10

    def reference(from_index, to_index):
        return (20 + fibonacci_sum_last_digit(to_index + 2) - fibonacci_sum_last_digit(from_index + 1)) % 10


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("last_digit_of_the_sum_of_fibonacci_numbers_again_unit_tests.py")

        all_tests_passed = True
        for (from_index, to_index) in [(1, 2), (2, 239), (1, 10 ** 10), (10 ** 10, 10 ** 13)]:
            assert from_index <= to_index
            if last_digit_of_the_sum_of_fibonacci_numbers_again(from_index, to_index) != reference(from_index, to_index):
                all_tests_passed = False
                failed("Wrong answer for m={}, n={}: {} {}".format(from_index, to_index,
                                                                   last_digit_of_the_sum_of_fibonacci_numbers_again(from_index, to_index),
                                                                   reference(from_index, to_index)))
                break

        if all_tests_passed:
            passed()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions
status: Unchecked
record: -1
