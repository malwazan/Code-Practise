type: edu
files:
- name: fibonacci_number.py
  visible: true
  placeholders:
  - offset: 225
    length: 115
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 230
    initialized_from_dependency: false
    selected: true
    status: Unchecked
  text: |
    # python3


    def fibonacci_number_naive(n):
        assert 0 <= n <= 40

        if n <= 1:
            return n

        return fibonacci_number_naive(n - 1) + fibonacci_number_naive(n - 2)


    def fibonacci_number(n):
        assert 0 <= n <= 40

        type here


    if __name__ == '__main__':
        input_n = int(input())
        print(fibonacci_number(input_n))
  learner_created: false
- name: fibonacci_number_unit_tests.py
  visible: true
  placeholders:
  - offset: 334
    length: 7
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 334
    initialized_from_dependency: false
    selected: true
    status: Unchecked
  text: |
    import unittest
    from fibonacci_number import fibonacci_number, fibonacci_number_naive


    class TestFibonacciNumber(unittest.TestCase):
        def test_small(self):
            for n in range(8):
                self.assertEqual(fibonacci_number(n), fibonacci_number_naive(n))

        def test_large(self):
            for (n, Fn) in [(30, 832040), (35, type here), (40, 102334155)]:
                self.assertEqual(fibonacci_number(n), Fn)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: logo.png
  visible: false
  text: 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
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from fibonacci_number import fibonacci_number


    def fibonacci_number_reference(n):
        assert 0 <= n <= 40
        if n <= 1:
            return n

        previous, current = 0, 1
        for _ in range(n - 1):
            previous, current = current, previous + current

        return current


    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("fibonacci_number_unit_tests.py")

        all_tests_passed = True
        for x in range(41):
            if fibonacci_number(x) != fibonacci_number_reference(x):
                all_tests_passed = False
                failed("Wrong answer for n={}".format(x))
                break

        if all_tests_passed:
            passed()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions
status: Unchecked
record: -1
