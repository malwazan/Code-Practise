type: edu
files:
- name: gcd.py
  visible: true
  placeholders:
  - offset: 313
    length: 206
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 313
    initialized_from_dependency: false
    selected: true
    status: Unchecked
  text: |
    # python3


    def gcd_naive(a, b):
        assert 1 <= a <= 2 * 10 ** 9 and 1 <= b <= 2 * 10 ** 9

        for divisor in range(min(a, b), 0, -1):
            if a % divisor == 0 and b % divisor == 0:
                return divisor

        assert False


    def gcd(a, b):
        assert 0 <= a <= 2 * 10 ** 9 and 0 <= b <= 2 * 10 ** 9

        type here


    if __name__ == '__main__':
        input_a, input_b = map(int, input().split())
        print(gcd(input_a, input_b))
  learner_created: false
- name: gcd_unit_tests.py
  visible: true
  placeholders:
  - offset: 148
    length: 5
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 148
    initialized_from_dependency: false
    selected: true
    status: Unchecked
  - offset: 301
    length: 0
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 298
    initialized_from_dependency: false
    selected: true
    status: Unchecked
  text: |
    import unittest
    from gcd import gcd, gcd_naive


    class TestGCD(unittest.TestCase):
        def test_small(self):
            for (a, b) in [(1, 1), (2, 6), type here]:
                self.assertEqual(gcd(a, b), gcd_naive(a, b))

        def test_large(self):
            for (a, b, d) in [(28851538, 1183019, 17657), type here]:
                self.assertEqual(gcd(a, b), d)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: logo.png
  visible: false
  text: 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
  learner_created: false
- name: tests.py
  visible: false
  text: |
    import math
    from test_helper import run_common_tests, failed, passed, check_tests_pass
    from gcd import gcd

    if __name__ == '__main__':
        run_common_tests()
        check_tests_pass("gcd_unit_tests.py")

        all_tests_passed = True
        for (a, b) in [(2, 3), (10**8, 10**5 - 1), (10**8, 10**9)]:
            if gcd(a, b) != math.gcd(a, b):
                all_tests_passed = False
                failed("Wrong answer for a={}, b={}".format(a, b))
                break

        if all_tests_passed:
            passed()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions
status: Unchecked
record: -1
